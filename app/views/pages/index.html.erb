<div class="container-fluid mt-3">
  <div class="row">
    <!-- Map Column -->
    <div class="col-md-8" id="map-container">
      <div id="map"></div>
    </div>

    <!-- Chat Column -->
    <div class="col-md-4" id="chat-container">
      <div class="card h-100">
        <div class="card-header bg-primary text-white">
          <h4>Chat with LLaMA2</h4>
        </div>
        <div class="card-body d-flex flex-column">
          <div id="chat-window" class="flex-grow-1 mb-3">
            <!-- Chat messages will be appended here dynamically -->
          </div>
          <div class="input-group">
            <input type="text" id="user-input" class="form-control" placeholder="Type your message...">
            <button class="btn btn-primary" id="send-btn">Send</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<!-- Google Maps API Script -->
<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.google_map[:api_key] %>&callback=initMap&v=beta&libraries=maps,marker"></script>

<script>
    let currentInfoWindow = null; // Track the currently open InfoWindow

    async function initMap() {
        const { Map } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        const map = new Map(document.getElementById("map"), {
            zoom: 14,
            center: { lat: 25.033964, lng: 121.564468 }, // Taipei 101 coordinates
            mapId: "DEMO_MAP_ID",
        });

        const places = [
            <% @places.each do |place| %>
            {
                name: "<%= place.name %>",
                address: "<%= place.address %>",
                rating: "<%= place.rating %>",
                position: { lat: <%= place.latitude %>, lng: <%= place.longitude %> }
            },
            <% end %>
        ];

        for (const place of places) {
            const marker = new AdvancedMarkerElement({
                map,
                position: place.position,
                title: place.name,
            });

            const infoWindowContent = buildContent(place);

            const infoWindow = new google.maps.InfoWindow({
                content: infoWindowContent
            });

            marker.addListener('gmp-click', () => {
                if (currentInfoWindow) {
                    currentInfoWindow.close(); // Close the previous InfoWindow
                }
                infoWindow.open(map, marker); // Open the new InfoWindow
                currentInfoWindow = infoWindow; // Store the current InfoWindow
            });
        }
    }

    function buildContent(place) {
        const content = document.createElement("div");

        content.classList.add("property");
        content.innerHTML = `
      <div class="card shadow-sm border-0 bg-blur">
        <div class="card-body p-3">
          <h5 class="card-title fw-bold mb-1 text-primary">${place.name}</h5>
          <h6 class="card-subtitle mb-2 text-muted">${place.address}</h6>
          <p class="card-text mb-0">
            <span class="fw-semibold">Rating:</span>
            <span class="badge bg-success">${place.rating}</span>
          </p>
        </div>
      </div>
    `;
        return content;
    }

    initMap();

    document.addEventListener("DOMContentLoaded", function() {
        const sendBtn = document.getElementById('send-btn');
        const userInput = document.getElementById('user-input');
        const chatWindow = document.getElementById('chat-window');

        sendBtn.addEventListener('click', function() {
            const message = userInput.value.trim();
            if (message !== "") {
                appendMessage('User', message);
                sendMessageToServer(message);
                userInput.value = "";
            }
        });

        function appendMessage(sender, message) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('mb-2');
            messageElement.innerHTML = `<strong>${sender}:</strong> ${message}`;
            chatWindow.appendChild(messageElement);
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        function sendMessageToServer(message) {
            fetch('/chats/send_message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ message: message })
            })
              .then(response => response.json())
              .then(data => {
                  if (data.reply) {
                      appendMessage('LLaMA2', data.reply);
                  }
              })
              .catch(error => {
                  console.error("Error:", error);
              });
        }
    });

</script>

<style>
    #map-container {
        height: calc(100vh - 60px); /* Adjusting for the height of the navbar or any other headers */
    }

    #map {
        height: 100%;
        width: 100%;
    }

    #chat-container {
        height: calc(100vh - 60px); /* Adjusting for the height of the navbar or any other headers */
    }

    .property {
        /* Custom styles for the property marker content */
    }

    .bg-blur {
        backdrop-filter: blur(10px);
        background-color: rgba(255, 255, 255, 0.8);
        border-radius: 8px;
    }
    #chat-window {
        height: 100%;
        max-height: calc(100vh - 160px); /* Adjust based on your layout */
        overflow-y: auto;
        border: 1px solid #ddd;
        padding: 10px;
    }

    #chat-container {
        height: calc(100vh - 60px); /* Adjusting for the height of the navbar or any other headers */
    }
    body {
        height: 100vh;
        margin: 0;
        padding: 0;
    }

    html, body {
        height: 100%;
    }
</style>
